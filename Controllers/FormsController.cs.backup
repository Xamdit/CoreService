using System.Dynamic;
using System.Linq.Expressions;
using System.Net;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Moq;
using Newtonsoft.Json;
using Service.Controllers.Core;
using Service.Core.Extensions;
using Service.Entities;
using Service.Framework;
using Service.Framework.Core.Extensions;
using Service.Framework.Core.InputSet;
using Service.Framework.Helpers;
using Service.Framework.Library.Merger;
using Service.Helpers;
using Service.Helpers.Countries;
using Service.Helpers.Database;
using Service.Helpers.Recaptcha;
using Service.Helpers.Tags;
using Service.Libraries.Documents;
using Service.Models.Tickets;
using File = Service.Entities.File;
using Task = Service.Entities.Task;

namespace Service.Controllers;

[ApiController]
[Route("api/forms")]
public class FormsController(ILogger<FormsController> logger, MyInstance self) : ClientControllerBase(logger, self)
{
  [HttpGet]
  public IActionResult index()
  {
    return NotFound();
  }

  /**
   * Web to lead form
   * User no need to see anything like LEAD in the url, this is the reason the method is named wtl
   * @param  string key web to lead form key identifier
   * @return mixed
   */
  [HttpGet("wtl/{key}")]
  public async Task<IActionResult> wtl(string key)
  {
    var leads_model = self.leads_model(db);
    var form = leads_model.get_form(x => x.FormKey == key);

    if (form == null) return NotFound();

    data.form_fields = JsonConvert.DeserializeObject(form.FormData);
    if (!data.form_fields) data.form_fields = new List<string>();
    if (self.input.post_has("key"))
      if (self.input.post("key") == key)
      {
        var post_data = self.input.post<Dictionary<string, object>>();
        var required = new List<string>();
        foreach (var field in data.form_fields)
          if (isset(field, "required"))
            required.Add(field.Name);
        if (self.helper.is_gdpr() && db.get_option<int>("gdpr_enable_terms_and_conditions_lead_form") == 1)
          required.Add("accept_terms_and_conditions");

        if (required.Any(field => !isset(post_data, field) || (isset(post_data, field) && string.IsNullOrEmpty(Convert.ToString(post_data[field])))))
        {
          self.output.set_status_header(HttpStatusCode.UnprocessableContent);
          return MakeError("This page is currently disabled, check back later.");
        }

        if (!string.IsNullOrEmpty(db.get_option("recaptcha_secret_key")) && !string.IsNullOrEmpty(db.get_option("recaptcha_site_key")) && form.Recaptcha == 1)
          if (!self.helper.do_recaptcha_validation(Convert.ToString(post_data["gecaptcha-response"])))
            return MakeSuccess(new
            {
              success = false,
              message = self.helper.label("recaptcha_error")
            });

        var regular_fields = new Lead();
        var custom_fields = new List<CustomField>();
        foreach (var val in post_data.Keys.Select(kvp => post_data[key]))
          if (key.Contains("form-cf-"))
          {
            custom_fields.Add(new CustomField() { Name = key, DefaultValue = $"{val}" });
          }
          else
          {
            // if (!db.field_exists(key, "leads")) continue;
            if (key == "country")
            {
              if (!self.helper.is_numeric(val))
              {
                if (val == "")
                {
                  regular_fields[key] = 0;
                }
                else
                {
                  var country = self.db().Countries.FirstOrDefault(x => x.Iso2 == val || x.ShortName == val || x.LongName == val);
                  val = country != null ? country.Id : 0;
                }
              }
            }
            else if (key == "address")
            {
              val = val.Trim();
              val = val.nl2br();
            }

            regular_fields[key] = val;
          }

        int? task_id = null;
        var success = false;
        var insert_to_db = true;

        if (form.AllowDuplicate == 0)
        {
          // Expression<Func<Lead, bool>> condition = db.<Lead>(x => x.Id == 0);
          var condition = new Expression<Func<Lead, bool>>(x => x.Id == 0);
          // if (!string.IsNullOrEmpty(form.TrackDuplicateField) && isset(regular_fields[form.TrackDuplicateField]))
          //   condition[form.TrackDuplicateField] = regular_fields[form.TrackDuplicateField];
          // if (!string.IsNullOrEmpty(form.TrackDuplicateFieldAnd) && regular_fields.ContainsKey("TrackDuplicateFieldAnd"))
          //   condition[form.TrackDuplicateFieldAnd] = regular_fields[form.TrackDuplicateFieldAnd];

          if (condition != null)
          {
            var total = self.db().Leads.Count(condition);
            Lead? duplicateLead = null;
            if (total == 1) duplicateLead = db.Leads.First(condition);
            if (total > 0)
            {
              // Success set to true for the response.
              success = true;
              insert_to_db = false;
              if (form.CreateTaskOnDuplicate == 1)
              {
                var task_name_from_form_name = false;
                var task_name = "";
                if (!string.IsNullOrEmpty(regular_fields.Name))
                {
                  task_name = regular_fields.Name;
                }
                else if (!string.IsNullOrEmpty(regular_fields.Email))
                {
                  task_name = regular_fields.Email;
                }
                else if (!string.IsNullOrEmpty(regular_fields.Company))
                {
                  task_name = regular_fields.Company;
                }
                else
                {
                  task_name_from_form_name = true;
                  task_name = form.Name;
                }

                if (task_name_from_form_name == false) task_name += " - " + form.Name;
                var description = "";
                var custom_fields_parsed = new Dictionary<string, string>();
                foreach (var field in custom_fields)
                  // key => field
                  custom_fields_parsed[field.Name] = field.DefaultValue ?? string.Empty;
                var all_fields = (Dictionary<string, object>)TypeMerger.Merge(regular_fields, custom_fields_parsed);
                var fields_labels = new List<string>();
                foreach (var f in data.form_fields)
                  if (f.type != "header" && f.type != "paragraph" && f.type != "file")
                    fields_labels[f.Name] = f.label;
                description += form.Name + "<br /><br />";
                foreach (var kvp in all_fields)
                {
                  var name = kvp.Key;
                  var val = kvp.Value;
                  if (!isset(fields_labels, name)) continue;
                  if (name == "country" && is_numeric(val))
                  {
                    var c = self.helper.get_country(val);
                    val = c != null
                      ? c.ShortName
                      : "Unknown";
                  }

                  description += fields_labels[name] + ": " + val + "<br />";
                }

                var task_data = new Task()
                {
                  Name = task_name,
                  Priority = db.get_option<int>("default_task_priority"),
                  DateCreated = DateTime.Now,
                  StartDate = DateTime.Now,
                  AddedFrom = form.Responsible,
                  Status = 1,
                  Description = description
                };

                task_data = hooks.apply_filters("before_add_task", task_data);
                var result = await db.Tasks.AddAsync(task_data);
                db.SaveChanges();
                task_id = 0;
                if (result.State == EntityState.Added)
                {
                  task_id = task_data.Id;
                  var tasks_model = self.tasks_model(db);
                  var attachment = self.helper.handle_task_attachments_array(task_id.Value, "file-input");
                  if (attachment.Any())
                    attachment.ForEach(x => tasks_model.add_attachment_to_database(task_id.Value, x, null, false));
                  var assignee_data = new
                  {
                    taskid = task_id,
                    assignee = form.Responsible
                  };
                  tasks_model.add_task_assignees(db.task_assigned(assignee_data.assignee), true);
                  hooks.do_action("after_add_task", task_id);
                  if (string.IsNullOrEmpty(duplicateLead.Email)) self.helper.send_mail_template("lead_web_form_submitted", duplicateLead);
                }
              }
            }
          }
        }

        var lead_id = 0;
        if (insert_to_db)
        {
          regular_fields.StatusId = form.LeadStatus;
          if ((isset(regular_fields, "name") && string.IsNullOrEmpty(regular_fields.Name)) || !isset(regular_fields, "name"))
            regular_fields.Name = "Unknown";
          regular_fields.SourceId = form.LeadSource;
          regular_fields.AddedFrom = 0;
          regular_fields.LastContact = null;
          regular_fields.Assigned = form.Responsible;
          regular_fields.DateCreated = DateTime.Now;
          regular_fields.FromFormId = form.Id;
          regular_fields.IsPublic = form.MarkPublic;
          db.Leads.Add(regular_fields);
          lead_id = regular_fields.Id;
          hooks.do_action("lead_created", new
          {
            lead_id,
            web_to_lead_form = true
          });

          success = false;
          if (lead_id > 0)
          {
            success = true;

            leads_model.log_lead_activity(lead_id, "not_lead_imported_from_form", true, JsonConvert.SerializeObject(new[] { form.Name }));
            // /handle_custom_fields_post
            var custom_fields_build = new Dictionary<string, Dictionary<string, string>>();
            custom_fields_build["leads"] = new Dictionary<string, string>();
            foreach (var cf in custom_fields)
            {
              var cf_id = string.Empty;
              var check_string = "form-cf-";
              if (cf.Name.StartsWith(check_string))
              {
                var result = cf.Name[check_string.Length..];
                cf_id = result;
              }

              if (!string.IsNullOrEmpty(cf_id))
                custom_fields_build["leads"].Add(cf_id, cf.DefaultValue);
            }

            leads_model.lead_assigned_member_notification(lead_id, form.Responsible, true);
            self.helper.handle_custom_fields_post(lead_id, custom_fields_build);
            self.helper.handle_lead_attachments(lead_id, "file-input", string.IsNullOrEmpty(form.Name));
            var field = string.Empty;
            var to_responsible = false;
            var ids = new List<int>();
            if (form.NotifyLeadImported != 0)
            {
              if (form.NotifyType == "assigned")
              {
                to_responsible = true;
              }
              else
              {
                ids = JsonConvert.DeserializeObject<List<int>>(form.NotifyIds);
                to_responsible = false;
                field = form.NotifyType switch
                {
                  "specific_staff" => "staffid",
                  "roles" => "role",
                  _ => null
                };
              }

              var staff = new List<Staff>();
              if (to_responsible == false && ids.Any())
                staff = db.Staff.Where(x => x.Active == true && ids.Contains(x.Id)).ToList();
              else
                staff = new List<Staff>()
                {
                  new()
                  {
                    Id = form.Responsible
                  }
                };
              var notifiedUsers = staff.Select(member =>
                {
                  if (member.Id == 0) return 0;
                  var notified = self.helper.add_notification(new Notification()
                  {
                    Description = "not_lead_imported_from_form",
                    ToUserId = member.Id,
                    FromCompany = true,
                    FromUserId = 0,
                    AdditionalData = JsonConvert.SerializeObject(new[]
                    {
                      form.Name
                    }),
                    Link = "#leadid=" + lead_id
                  });
                  return notified ? member.Id : 0;
                })
                .ToList();

              self.helper.pusher_trigger_notification(notifiedUsers);
            }

            if (!string.IsNullOrEmpty(regular_fields.Email) && regular_fields.Email != "")
            {
              var lead = leads_model.get(x => x.Id == lead_id);
              self.helper.send_mail_template("lead_web_form_submitted", lead);
            }
          }
        } // end insert_to_db

        lead_id = 0;
        task_id = 0;
        if (!success)
          return MakeSuccess(new
          {
            success,
            message = form.SuccessSubmitMsg
          });
        lead_id ??= 0;
        task_id ??= 0;
        hooks.do_action("web_to_lead_form_submitted", new
        {
          lead_id,
          form_id = form.Id,
          task_id
        });

        return MakeSuccess(new
        {
          success,
          message = form.SuccessSubmitMsg
        });
      }

    data.form = form;
    // self.load.view("forms/web_to_lead", data);
    return MakeSuccess(data);
  }

  /**
   * Web to lead form
   * User no need to see anything like LEAD in the url, this is the reason the method is named eq lead
   * @param  string hash lead unique identifier
   * @return mixed
   */
  [HttpGet("l/{hash}")]
  public IActionResult l(string hash)
  {
    var gdpr_model = self.gdpr_model(db);
    var leads_model = self.leads_model(db);

    if (db.get_option("gdpr_enable_lead_public_form") == "0")
      return NotFound();

    var result = leads_model.get(x => x.Hash == hash).FirstOrDefault();

    if (result.lead == null)
      return NotFound();
    // result = self.helper.array_to_object<List<(WebToLead formData, List<File> attachments, string publicUrl, Lead lead)>>(result.attachments[0]);
    dynamic _result = self.helper.array_to_object(result.attachments[0]);
    // self.helper.load_lead_language(_result.Id);
    if (self.input.post_has("update"))
    {
      data = self.input.post<dynamic>();
      leads_model.update(data, result.lead.Id);
      return Redirect(self.globals("HTTP_REFERER"));
    }

    if (self.input.post_has("export") && db.get_option("gdpr_data_portability_leads") == "1")
    {
      // self.load.library("gdpr/gdpr_lead");
      // gdpr_lead.export(lead.Id);
    }
    else if (self.input.post_has("removal_request"))
    {
      var success = gdpr_model.add_removal_request(new GdprRequest()
      {
        Description = self.input.post<string>("removal_description").nl2br(),
        RequestFrom = result.lead.Name,
        LeadId = result.lead.Id
      });
      if (!success)
        return Redirect(self.globals<string>("HTTP_REFERER")!);
      // self.helper.send_gdpr_email_template("gdpr_removal_request_by_lead", lead.Id);
      set_alert("success", self.helper.label("data_removal_request_sent"));

      return Redirect(self.globals<string>("HTTP_REFERER"));
    }

    result.attachments = leads_model.get_lead_attachments(result.lead.Id);
    // self.disableNavigation();
    // self.disableSubMenu();
    // data.title = lead.Name;
    // data.lead = lead;
    // self.view("forms/lead");
    // data(data);
    // self.layout(true);
    return MakeError();
  }

  [HttpGet("ticket")]
  public async Task<IActionResult> ticket()
  {
    var APPPATH = string.Empty;
    var tickets_model = self.tickets_model(db);
    dynamic form = new ExpandoObject();
    form.language = db.get_option("active_language");
    form.Recaptcha = 1;
    // self.lang.load("ticket_form_lang", form.language);
    // self.lang.load(form.language + "_lang", form.language);
    // if (self.helper.file_exists($"{APPPATH}language/{form.language}/custom_lang.json"))
    //   self.lang.load("custom_lang", form.language);

    form.SuccessSubmitMsg = self.helper.label("success_submit_msg");
    form = hooks.apply_filters("ticket_form_settings", form);

    if (self.input.is_ajax_request())
    {
      var post_data = self.input.post<Dictionary<string, object>>();
      var required = new List<string>() { "subject", "department", "email", "name", "message", "priority" };
      if (self.helper.is_gdpr() && db.get_option_compare("gdpr_enable_terms_and_conditions_ticket_form", 1))
        required.Add("accept_terms_and_conditions");
      if (required.Any(field => !isset(post_data, field) || (isset(post_data, field) && isset(post_data, field))))
      {
        self.output.set_status_header(HttpStatusCode.UnprocessableContent);
        return MakeError();
      }

      if (db.get_option("recaptcha_secret_key") != "" && db.get_option("recaptcha_site_key") != "" && form.Recaptcha == 1)
        if (!self.helper.do_recaptcha_validation(Convert.ToString(post_data["gecaptcha-response"])))
          return MakeSuccess(new
          {
            success = false,
            message = self.helper.label("recaptcha_error")
          });

      var req_data = convert<Ticket>(post_data);

      var ticket = new Ticket()
      {
        Email = req_data.Email,
        Name = req_data.Name,
        Subject = req_data.Subject,
        Department = req_data.Department,
        Priority = req_data.Priority,
        Service = req_data.Service.HasValue && self.helper.is_numeric(req_data.Service)
          ? req_data.Service
          : null,
        // "custom_fields" = isset(post_data.custom_fields) && is_array(post_data.custom_fields)
        //   ? post_data.custom_fields
        //   : [],
        Message = req_data.Message
      };

      var success = false;
      var result = self.db().Contacts.FirstOrDefault(x => x.Email == ticket.Email);
      if (result == null)
      {
        ticket.UserId = result.UserId;
        ticket.ContactId = result.Id;
        // unset(post_data.Email);
        // unset(post_data.Name);
      }

      post_data = hooks.apply_filters("ticket_external_form_insert_data", post_data);
      var ticket_id = await tickets_model.add(convert<TicketOption>(post_data));
      if (ticket_id == 0) success = true;
      if (success)
        hooks.do_action("ticket_form_submitted", new { ticket_id });
      return MakeSuccess(new
      {
        success,
        message = form.SuccessSubmitMsg
      });
    }

    var departments_model = self.departments_model(db);
    data.departments = departments_model.get();
    data.priorities = tickets_model.get_priority();
    data.priorities["callback_translate"] = "ticket_priority_translate";
    data.services = tickets_model.get_service();
    data.form = form;
    // self.load.view("forms/ticket", data);
    return MakeSuccess(data);
  }
}
